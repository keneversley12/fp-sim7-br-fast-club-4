{"ast":null,"code":"var _jsxFileName = \"/Users/lordsosa/Desktop/strategio-project/breakfast_club/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { CssBaseline, Grid } from '@material-ui/core';\nimport { getPlacesData, getWeatherData } from './api/travelAdvisorAPI';\nimport Header from './components/Header/Header';\nimport List from './components/List/List';\nimport Map from './components/Map/Map';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [type, setType] = useState('restaurants');\n  const [rating, setRating] = useState('');\n  const [coords, setCoords] = useState({});\n  const [bounds, setBounds] = useState(null);\n  const [weatherData, setWeatherData] = useState([]);\n  const [filteredPlaces, setFilteredPlaces] = useState([]);\n  const [places, setPlaces] = useState([]);\n  const [autocomplete, setAutocomplete] = useState(null);\n  const [childClicked, setChildClicked] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(_ref => {\n      let {\n        coords: {\n          latitude,\n          longitude\n        }\n      } = _ref;\n      setCoords({\n        lat: latitude,\n        lng: longitude\n      });\n    });\n  }, []);\n  useEffect(() => {\n    const filtered = places.filter(place => Number(place.rating) > rating);\n    setFilteredPlaces(filtered);\n  }, [rating]);\n  useEffect(() => {\n    if (bounds) {\n      setIsLoading(true);\n      getWeatherData(coords.lat, coords.lng).then(data => setWeatherData(data));\n      getPlacesData(type, bounds.sw, bounds.ne).then(data => {\n        setPlaces(data.filter(place => place.name && place.num_reviews > 0));\n        setFilteredPlaces([]);\n        setRating('');\n        setIsLoading(false);\n      });\n    }\n  }, [bounds, type]);\n  const onLoad = autoC => setAutocomplete(autoC);\n  const onPlaceChanged = () => {\n    const lat = autocomplete.getPlace().geometry.location.lat();\n    const lng = autocomplete.getPlace().geometry.location.lng();\n    setCoords({\n      lat,\n      lng\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      onPlaceChanged: onPlaceChanged,\n      onLoad: onLoad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      style: {\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(List, {\n          isLoading: isLoading,\n          childClicked: childClicked,\n          places: filteredPlaces.length ? filteredPlaces : places,\n          type: type,\n          setType: setType,\n          rating: rating,\n          setRating: setRating\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 8,\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Map, {\n          setChildClicked: setChildClicked,\n          setBounds: setBounds,\n          setCoords: setCoords,\n          coords: coords,\n          places: filteredPlaces.length ? filteredPlaces : places,\n          weatherData: weatherData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"umUPIDraGWSJWV9k6oh/NyGs+4k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","CssBaseline","Grid","getPlacesData","getWeatherData","Header","List","Map","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","type","setType","rating","setRating","coords","setCoords","bounds","setBounds","weatherData","setWeatherData","filteredPlaces","setFilteredPlaces","places","setPlaces","autocomplete","setAutocomplete","childClicked","setChildClicked","isLoading","setIsLoading","navigator","geolocation","getCurrentPosition","_ref","latitude","longitude","lat","lng","filtered","filter","place","Number","then","data","sw","ne","name","num_reviews","onLoad","autoC","onPlaceChanged","getPlace","geometry","location","children","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","style","width","item","xs","md","length","display","justifyContent","alignItems","_c","$RefreshReg$"],"sources":["/Users/lordsosa/Desktop/strategio-project/breakfast_club/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { CssBaseline, Grid } from '@material-ui/core';\n\nimport { getPlacesData, getWeatherData } from './api/travelAdvisorAPI';\nimport Header from './components/Header/Header';\nimport List from './components/List/List';\nimport Map from './components/Map/Map';\n\nconst App = () => {\n  const [type, setType] = useState('restaurants');\n  const [rating, setRating] = useState('');\n\n  const [coords, setCoords] = useState({});\n  const [bounds, setBounds] = useState(null);\n\n  const [weatherData, setWeatherData] = useState([]);\n  const [filteredPlaces, setFilteredPlaces] = useState([]);\n  const [places, setPlaces] = useState([]);\n\n  const [autocomplete, setAutocomplete] = useState(null);\n  const [childClicked, setChildClicked] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(({ coords: { latitude, longitude } }) => {\n      setCoords({ lat: latitude, lng: longitude });\n    });\n  }, []);\n\n  useEffect(() => {\n    const filtered = places.filter((place) => Number(place.rating) > rating);\n\n    setFilteredPlaces(filtered);\n  }, [rating]);\n\n  useEffect(() => {\n    if (bounds) {\n      setIsLoading(true);\n\n      getWeatherData(coords.lat, coords.lng)\n        .then((data) => setWeatherData(data));\n\n      getPlacesData(type, bounds.sw, bounds.ne)\n        .then((data) => {\n          setPlaces(data.filter((place) => place.name && place.num_reviews > 0));\n          setFilteredPlaces([]);\n          setRating('');\n          setIsLoading(false);\n        });\n    }\n  }, [bounds, type]);\n\n  const onLoad = (autoC) => setAutocomplete(autoC);\n\n  const onPlaceChanged = () => {\n    const lat = autocomplete.getPlace().geometry.location.lat();\n    const lng = autocomplete.getPlace().geometry.location.lng();\n\n    setCoords({ lat, lng });\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <Header onPlaceChanged={onPlaceChanged} onLoad={onLoad} />\n      <Grid container spacing={3} style={{ width: '100%' }}>\n        <Grid item xs={12} md={4}>\n          <List\n            isLoading={isLoading}\n            childClicked={childClicked}\n            places={filteredPlaces.length ? filteredPlaces : places}\n            type={type}\n            setType={setType}\n            rating={rating}\n            setRating={setRating}\n          />\n        </Grid>\n        <Grid item xs={12} md={8} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n          <Map\n            setChildClicked={setChildClicked}\n            setBounds={setBounds}\n            setCoords={setCoords}\n            coords={coords}\n            places={filteredPlaces.length ? filteredPlaces : places}\n            weatherData={weatherData}\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}